datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  USER
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  password      String?
  bio           String?
  city          String?
  emailVerified DateTime?
  image         String?
  role          Role            @default(USER)
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  friendships     Friendship[]      @relation("UserFriendships")
  friendsWith     Friendship[]      @relation("UserFriendsWith")
  Notification    Notification[]
  Enrollment      Enrollment[]
  CompletedUnit   CompletedUnit[]
  CompletedModule CompletedModule[]
  CompletedCourse CompletedCourse[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum Status {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
  UNBLOCKED
}

model Friendship {
  id        String   @id @default(cuid())
  userId    String
  friendId  String
  status    Status
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("UserFriendships", fields: [userId], references: [id], onDelete: Cascade)
  friend    User     @relation("UserFriendsWith", fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
}

enum NotificationType {
  FRIEND_REQUEST
  FRIEND_REQUEST_ACCEPTED
  FRIEND_REQUEST_REJECTED
  FRIEND_REQUEST_BLOCKED
  FRIEND_REQUEST_UNBLOCKED
}

model Notification {
  id         String           @id @default(cuid())
  receiverId String?
  type       NotificationType
  senderId   String?
  message    String
  read       Boolean          @default(false)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  user User? @relation(fields: [receiverId], references: [id], onDelete: Cascade)
}

/// Courses

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  PRIVATE
}

enum CourseType {
  LANGUAGE
  TOOL
  FRAMEWORK
  CONCEPT
}

enum CourseCategory {
  FREE
  SKILL_PATH
  CAREER_PATH
}

model Course {
  id            String          @id @default(cuid())
  name          String          @unique
  description   String
  image         String?
  price         Int?
  status        CourseStatus
  type          CourseType?
  level         CourseLevel?
  currentModule Int?
  category      CourseCategory? @default(FREE)

  optimal      Boolean?
  duration     Int?
  instructorId String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  resources       CourseResource[]
  Enrollment      Enrollment[]
  module          Module[]
  CompletedCourse CompletedCourse[]
}

enum ResourceType {
  LANGUAGE
  TOOL
  FRAMEWORK
  CONCEPT
}

model Resource {
  id          String       @id @default(cuid())
  name        String       @unique
  type        ResourceType
  description String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  courses CourseResource[]
}

model CourseResource {
  courseId   String
  resourceId String

  course   Course   @relation(fields: [courseId], references: [id])
  resource Resource @relation(fields: [resourceId], references: [id])

  @@id([courseId, resourceId])
}

model Enrollment {
  userId      String
  courseId    String
  progress    Float     @default(0.0)
  enrolledAt  DateTime  @default(now())
  completedAt DateTime?
  isCompleted Boolean   @default(false)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([userId, courseId])
}

enum ContentType {
  INFORMATION
  LESSON
  ARTICLE
  PROJECT
  QUIZ
  EXERCISE
}

model Module {
  id          String  @id @default(cuid())
  title       String
  description String
  order       Int
  courseId    String
  isCompleted Boolean @default(false)
  units       Unit[]

  course          Course            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  CompletedModule CompletedModule[]
}

model Unit {
  id          String      @id @default(cuid())
  title       String
  type        ContentType
  order       Int
  moduleId    String
  description String?
  body        String?
  videoUrl    String?
  assetUrl    String?
  isCompleted Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  task          Task[]
  CompletedUnit CompletedUnit[]

  @@unique([moduleId, order])
}

enum TaskType {
  READ
  WRITE_CODE
  UPLOAD
  VIDEO
  QUIZ
  PROJECT
}

model Task {
  id          String   @id @default(cuid())
  unitId      String
  type        TaskType
  title       String
  description String?
  order       Int
  points      Int?
  isCompleted Boolean  @default(false)
  isOptional  Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  unit      Unit        @relation(fields: [unitId], references: [id], onDelete: Cascade)
  paragraph Paragraph[]

  @@unique([unitId, order])
}

model Paragraph {
  id         String       @id @default(cuid())
  content    String
  order      Int
  taskId     String
  task       Task?        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  bulletList BulletList[]
}

model BulletList {
  id          String     @id @default(cuid())
  content     String
  order       Int
  paragraphId String
  paragraph   Paragraph? @relation(fields: [paragraphId], references: [id], onDelete: Cascade)
}

model CompletedUnit {
  userId      String
  unitId      String
  completedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  unit Unit @relation(fields: [unitId], references: [id], onDelete: Cascade)

  @@id([userId, unitId])
}

model CompletedModule {
  userId      String
  moduleId    String
  completedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@id([userId, moduleId])
}

model CompletedCourse {
  userId      String
  courseId    String
  completedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([userId, courseId])
}
